--- lib/conference.tcl-baseline	2015-07-23 17:08:49.000000000 -0700
+++ lib/conference.tcl-merge	2015-07-23 17:08:49.000000000 -0700
@@ -76,7 +76,9 @@
 	get-submission-handle known-submissions-vt known-timeline-validation \
 	get-talk-type get-talk-state known-talk-types known-talk-stati known-speaker \
 	known-attachment get-attachment known-submitter its-hotel \
-	known-talks-vt
+	known-talks-vt \
+	\
+	test-timeline-known
     namespace ensemble create
 
     namespace import ::cmdr::ask
@@ -101,6 +103,7 @@
     rename core config
 
     namespace import ::cmdr::table::general ; rename general table
+    namespace import ::cmdr::table::dict    ; rename dict    table/d
 }
 
 # # ## ### ##### ######## ############# ######################
@@ -110,6 +113,16 @@
 
 # # ## ### ##### ######## ############# ######################
 
+proc ::cm::conference::test-timeline-known {config} {
+    debug.cm/conference {}
+    Setup
+    db show-location
+    util pdict [known-timeline-validation]
+    return
+}
+
+# # ## ### ##### ######## ############# ######################
+
 proc ::cm::conference::cmd_list {config} {
     debug.cm/conference {}
     Setup
@@ -600,6 +613,9 @@
     puts "Conference \"[color name [get $id]]\", initialize timeline ... "
     flush stdout
 
+    # Clear and re-initialize
+
+    timeline-clear $id
     timeline-init $id
 
     puts [color good OK]
@@ -631,11 +647,13 @@
 
     set conference [current]
     set details    [details $conference]
+    set dry        [$config @dry]
     set template   [$config @template]
     set tlabel     [template get $template]
 
     puts "Mailing the committee of \"[color name [get $conference]]\":"
     puts "Using template: [color name $tlabel]"
+    if {$dry} { puts [color note "Dry run"] }
 
     set template     [template details $template]
     set destinations [db do eval {
@@ -655,6 +673,12 @@
     debug.cm/conference {addresses    = ($addresses)}
     debug.cm/conference {destinations = ($destinations)}
 
+    if {![llength $addresses]} {
+	util user-error \
+	    "No destinations." \
+	    COMMITEE PING EMPTY
+    }
+
     set origins [db do eval {
 	SELECT dname
 	FROM   contact
@@ -671,6 +695,12 @@
 	set origins [join $origins {, }]
     }
 
+    if {![llength $origins]} {
+	util user-error \
+	    "No chairs." \
+	    COMMITEE PING NO-CHAIRS
+    }
+
     puts "From: $origins"
     puts [util indent [join $addresses \n] "To: "]
 
@@ -687,10 +717,16 @@
 		    [string map $map $template]]
     }] show
 
-    if {![ask yn "Send mail ? " no]} {
+    if {!$dry &&
+	(![cmdr interactive?] ||
+	 ![ask yn "Send mail ? " no])} {
 	puts [color note Aborted]
 	return
     }
+    if {$dry} {
+	puts [color note "Skipped mailing"]
+	return
+    }
 
     set mconfig [mailer get-config]
     set template [string map [list @origins@ $origins] [insert $conference $template]]
@@ -1424,21 +1460,34 @@
     db show-location
 
     set conference [current]
+    set dry        [$config @dry]
     set template   [$config @template]
     set tlabel     [template get $template]
 
     puts "Mailing the sponsors of \"[color name [get $conference]]\":"
     puts "Using template: [color name $tlabel]"
+    if {$dry} { puts [color note "Dry run"] }
 
     set template     [template details $template]
     set destinations [db do eval {
 	SELECT id, email
 	FROM   email
-	WHERE  contact IN (SELECT person
+	WHERE  contact IN (-- branch a: sponsors which are companies, mail their represenatives
+			   SELECT person
 			   FROM   liaison
 			   WHERE  company IN (SELECT contact
 					      FROM   sponsors
-					      WHERE  conference = :conference))
+					      WHERE  conference = :conference)
+			   UNION
+			   -- branch b: sponsors which are people, mail them directly
+			   SELECT id
+			   FROM contact
+			   WHERE id IN (SELECT contact
+					FROM   sponsors
+					WHERE  conference = :conference)
+			   AND   type = 1 -- sponsor is person
+			   -- TODO: in-memory cache of type/name mapping. or put into join ?
+			   )
     }]
 
     debug.cm/conference {destinations = ($destinations)}
@@ -1449,6 +1498,12 @@
     debug.cm/conference {addresses    = ($addresses)}
     debug.cm/conference {destinations = ($destinations)}
 
+    if {![llength $addresses]} {
+	util user-error \
+	    "No destinations." \
+	    SPONSOR PING EMPTY
+    }
+
     puts [util indent [join $addresses \n] "To: "]
 
     # TODO: sponsor-ping - Allow conference placeholders ?
@@ -1462,10 +1517,16 @@
 		    [string map $map $template]]
     }] show
 
-    if {![ask yn "Send mail ? " no]} {
+    if {!$dry &&
+	(![cmdr interactive?] ||
+	 ![ask yn "Send mail ? " no])} {
 	puts [color note Aborted]
 	return
     }
+    if {$dry} {
+	puts [color note "Skipped mailing"]
+	return
+    }
 
     set mconfig [mailer get-config]
     mailer batch _ address name $destinations {
@@ -1630,6 +1691,9 @@
 
     lassign [$config @name] role contact
 
+    debug.cm/conference {role    = ($role)}
+    debug.cm/conference {contact = ($contact)}
+
     puts -nonewline "  [get-role $role] \"[color name [cm contact get $contact]]\" ... "
     flush stdout
 
@@ -1786,7 +1850,7 @@
 	    CONFERENCE RATE HOTEL
     }
 
-    [table t {Property Value} {
+    [table/d t {
 	db do eval {
 	    SELECT rate, decimal, currency, groupcode, begindate, enddate, deadline, pdeadline
 	    FROM   rate
@@ -4210,7 +4274,32 @@
 	return {}
     }
 
-    return [cm::contact::KnownLimited $staff]
+    # Find the contact information for the staff
+    set known [cm::contact::KnownLimited $staff]
+
+    # Compute map for staff from contact to complete role+contact.
+    db do eval {
+	SELECT R.text  AS role,
+	       C.dname AS name,
+	       R.id    AS rid,
+	       C.id    AS cid
+	FROM   conference_staff S,
+	       staff_role       R,
+	       contact          C
+	WHERE  S.conference = :conference
+	AND    S.role       = R.id
+	AND    S.contact    = C.id
+	ORDER BY role, name
+    } {
+	dict set map $cid [list $rid $cid]
+    }
+
+    # Remap the contact information in known to role+contact
+    dict for {key id} $known {
+	dict set known $key [dict get $map $id]
+    }
+
+    return $known
 }
 
 proc ::cm::conference::known-staff-select {conference} {
@@ -4782,7 +4871,7 @@
 	SELECT id, text, key
 	FROM   timeline_type
     } {
-	dict set known $text $id
+	dict set known [string tolower $text] $id
 	dict set known $key  $id
     }
 
