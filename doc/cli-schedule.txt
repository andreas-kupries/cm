
cli api for specification of schedules
======================================

2 use cases

(1) restoration of a schedule from a dump
(2) interactive definition/entry of a schedule.

Different needs:

(Ad 1): Just needs commands to define
- schedule
- tracks in schedule
- items in schedule
with ability to reference schedule and track (names).
Replication of schedule and track names is irrelevant.

(Ad 2): Needs to be easy on a user, entering items quickly without
having to (re-)enter lots of things (schedule, track name, day, time,
... Commands have to maintain state between them which can be used to
deduce information, allowing it to be missing.



Restoration
===========

cm schedule new|create         ?NAME?
cm schedule (new|create)-track SCHEDULE ?NAME?
cm schedule (new|create|-item  ?--in ITEM? SCHEDULE DAY TRACK START LENGTH DESC ?SPEAKER?
cm schedule (new|create)-hole  ?--in ITEM? SCHEDULE DAY TRACK START LENGTH LABEL
-- empty string for track ==> NULL, crossing tracks


START = integer|(hour:minute)

Interactive
===========

STATE:

* Much of the state we need can be found in the databvase itself, in
  the set of already entered items!
* We need:

  - ref to current schedule
  - ref to current day           (in schedule)
  - ref to current track         (in schedule, day)
  - ref to current item          (in schedule, track, day)
  - flag if current item is open (in schedule, track, day)

  Time data is NOT needed most of the time as it is implied by the
  current item and openess. It is needed for when we add the first
  item, because we have nothing to anchor to ... Ideas:

  - Global default (General start time)
  - Require start time (option) for first item, reject missing.
    (and/or ask interactively for it when needed)

= Actually, the entire state can be put into the database in some way:

(1) table "pschedule_current" - Ref to current schedule.
    Reject when more than one entry, or none.

(2) table "pschedule" - Add columns for current track, day, item, and open-state of the latter.

=> All state manipulation can now be done on the database.
=> Validation, i.e. checking the constraints can be done with suitable queries.



Commands (leaving out the prefix 'cm schedule')...

All commands show the relevant state as their last action before ending ...
Set is designed for interactive use, either from terminal, or from within
an interactive shell in the cm cli.

	new    ?NAME?
	create ?NAME?
	|	create new schedule
	|	new schedule becomes current
	|	initialize state for new schedule (day 0 track NULL, no item, no openess)
	|	<<show state>>

	rename ?NAME?
	|      rename current schedule

	new-track    ?NAME?
	create-track ?NAME?
	+track       ?NAME?
	|	create new track
	|	new track becomes current track
	|	initialize state (no item, no openess)
	|	<<show state>>

	rename-track   ?NAME?
	|	rename the current track

	change-track ?--unset? ?NAME?
	set-track    ?--unset? ?NAME?
	track=       ?--unset? ?NAME?
	|	chosen track becomes current, --unset for NULL
	|	<<show state>>

	tracks
	|	show list of tracks

	next
	|	move current day forward by one
	|	initialize state, if day is new (track NULL, no item, no openess)
	|	<<show state>>

	change-day DAY
	set-day    DAY
	day=       DAY
	|	set current day
	|	<<show state>>

	start TIME
	first TIME
	|	set a global time to use for the first item in a day/track

	placeholder ?LENGTH? LABEL
	event       ?LENGTH? DESC ?SPEAKERDESC?
	|	add an item to the schedule
	|	<<show state>>

	|	LOGIC
	|	1st item!
	|	=>	start = global start time
	|		length as per spec, default is 0.
	|	current item is open
	|	=>	insert new item as child, and set length
	|		of the parent.
	|		make new item the current item (is closed)
	|	current item is closed
	|	=>	insert new item after current item
	|		inherit group/parent information.
	|		extend the parent's length, if any.
	|
	|	For track NULL the new item's start is at the end of
	|	the highest end time across all tracks.
	|	The new item is placed as current in __all__ tracks.

	open
	|	open the current item
	|	fail/reject if it has a parent
	|	fail/reject if its length is > 0, and without children
	|	(group length is derived from children).
	|	<<show state>>

	close
	|	close current group
	|	ignore if item has no parent
	|	else:	make parent the current item, note closed.
	|	<<show state>>

	drop
	remove
	|	remove the current item (and possibly its children)
	|	make the previous non-child item in time the current item
	|	NOTE: I.e. after the undo we are adding after a group, not
	|	      extending the group (no implicit 'open').
	|	<<show state>>

	pin
	|	pin the current item to it start.
	|	i.e. make it impossible to "move".
	|	can only pin items outside of a group.
	|	cannot pin items in a group.

	retitle ?--speaker?TEXT
	|	change desc or label of current item, depending on type
	|	fail if using --speaker for placeholder item
	|	<<show state>>

	extend LENGTH
	|	extend length of current item
	|	fail if it is a group, i.e. parent to children.
	|		extend the parent's length, if any.
	|	<<show state>>

	move	TIME
	|	move current item to the given start time. Move
	|	all children with it. Pinned items cannot be
	|	moved.
	|	<<show state>>

	NOTE:
	-	As given the current item is either the fully last item
		added, or the last item added excluding children.
		Regardless, it is the last item in time.

	-	We currently have no command to change the current
                item to something in the middle of the timeline. This
                means that moving an item, or extending it does __not__
		have to care about items coming after it.

	Nav commands to move the current item ?
	(See WIBNI below)
	yank, copy commands ?

	yank ?FROM? ?TO?
	|	Remember current item (and children) in a buffer.
	|	Or, if specified, all items beginning with FROM to current, or TO

	insert ?--keep-track?
	|	Insert copy of item in the yank-buffer into
	|	current day and track, or just current day.
	|	- Timing data is copied unchanged!
	|	- Track is kept unchanged when --keep-track is specified.
	|	Copy will fail if generated item violates constraints.

????	mark REF

	forw(ard)	down	++
	back(ward)	up	--
	|	Move the current item

	goto REF
	|	Make REF the current item

	-	When implementing navigation all commands

		- inserting an item  - event, placeholder
		- extending an item  - extend
		- moving an item     - move
		- removing an item   - undo

		(generally: changing time (start/length) attributes of
		an item)

		have to be modified to take the items after the
		current item into account (i.e. move them
		appropriately to keep the contraints inviolate)

	show
	|	<<show state>>

Example
===========
Tcl 2014 Schedule, entered interactively ...

% cm schedule
> new Tcl'2014
> start 9:00
> +track 'Tutorial A'
> +track 'Tutorial B'
> +track 'Tech Session'
> +track 'Community'
> track= 'Tutorial A'
> event Tutorials
> open
> placeholder 3:30 @T0m0
> close
> track= 'Tutorial B'
> event Tutorials
> open
> placeholder 3:30 @T0m1
> close
> track= --unset
> event 'Lunch Break'
> open
> event 60 Lunch Provided
> close
> track= 'Tutorial A'
> event Tutorials
> open
> placeholder 3:30 @T0a0
> close
> track= 'Tutorial B'
> event Tutorials
> open
> placeholder 3:30 @T0a1
> close
> track= 'Tutorial A'
> event 60 'Free Tutorial'
> track= Community
> event 'Social and BOFs'
> move 19:00
> open
> event 5:00 "Hospitality suite" "Tcl Community Association"
> close

> ;## WIBNI to duplicate this ((group) item) across days
> yank
> day= 1
> insert --keep-track
> next
> insert --keep-track
> next
> insert --keep-track
> next
> insert --keep-track
> day= 0

> ;## WIBNI to duplicate an entire day
> ;## COST  -- placeholder uniqueness required auto-modify.
> ;## COST  -- need command to edit other than current item
> ;## COST  -- or command to switch current item into middle.
> ;## COST  -- and either restrict editing to non-time attributes
> ;## COST  -- or handle movement of items after current one.
> next
> ;# -- ENTER day 1 - tutorial day 2
> next
> track= 'Tech Session'
> event 'Welcome and Keynote'
> open
> event 'Welcome and Announcements' Host
> placeholder 1:30 @K1
> close
> event Break
> open
> event 15 Break
> close
> placeholder @S1
> open
> event 30 @S1.1
> event 30 @S1.2
> event 30 @S1.3
> close
> event 'Lunch Break'
> open
> event 1:00 'Conference Luncheon' "Tcl Community Association"
> close
> placeholder @S2
> open
> event 30 @S2.1
> event 30 @S2.2
> event 30 @S2.3
> close
> placeholder @S3
> open
> event 30 @S3.1
> event 30 @S3.2
> event 30 @S3.3
> close
> event 'Dinner Break'
> open
> event 2:30 "See registration for suggestions" "On your own"
> close
> ;## -- enter hospitality suite
> ;# enter day 3 - conference day 4
> ;# enter day 4 - conference day 5
